# -*- coding: utf-8 -*

"""
Main window of the tool.
@author: Dimitri Justeau <dimitri.justeau@gmail.com>
"""

import sys
import os
from datetime import date
from dateutil.relativedelta import relativedelta
from re import split
import platform

from PySide.QtGui import *
from PySide.QtCore import *

from gui.ui.ui_mainwindow import Ui_MainWindow
from gui.ui.ui_string_list_dialog import Ui_StringListDialog
from gui.report_widget import ReportWidget
from gui.ui.ui_about_dialog import Ui_AboutDialog
from gui.ui.ui_password_dialog import Ui_PassWordDialog
from template_processor.xls_template_processor import XlsTemplateProcessor
from data.query import *
from data.fuchia_database import FuchiaDatabase
from data.arv_repartition import ArvRepartition
from data.indicators.base_indicator import INDICATORS_REGISTRY
import texts


sys.setrecursionlimit(10000)


class MainWindow(QMainWindow, Ui_MainWindow):
    """
    Main window of the tool, build from the ui generated by pyside-uic
    from the corresponding .ui Qt Designer file.
    """

    def __init__(self):
        """
        Initialise the main window, create the report widget and
        connect the signals.
        """
        super(MainWindow, self).__init__()
        self.setupUi(self)
        self.addDockWidget(Qt.LeftDockWidgetArea,
                           self.prescriptions_dockwidget)
        self.addDockWidget(Qt.LeftDockWidgetArea,
                            self.patients_details_dockwidget)
        self.tabifyDockWidget(
            self.prescriptions_dockwidget,
            self.patients_details_dockwidget
        )
        self.setWindowIcon(QIcon(constants.APP_ICON))
        self.data_dockwidget.close()
        self.advanced_frame.hide()
        self.parameters_dockwidget.setMinimumHeight(0)
        self.parameters_dockwidget.setMinimumWidth(0)
        self.parameters_dockcontents.adjustSize()
        self.parameters_dockwidget.close()
        self.init_parameters_widget()
        self.parameters_dockwidget.setFloating(True)
        self.addToolBar(Qt.LeftToolBarArea, self.toolbar)
        self.central_widget = QMainWindow()
        vlayout = QVBoxLayout()
        vlayout.addWidget(self.site_label)
        vlayout.addWidget(self.scrollArea)
        cw = QWidget()
        cw.setLayout(vlayout)
        self.central_widget.setCentralWidget(cw)
        self.setCentralWidget(self.central_widget)
        self.init_main_toolbar()
        self.init_secondary_toolbar()
        self.init_menu_bar()
        self.set_status_tips()
        self.init_patient_details_tree_widget()
        self.init_prescriptions_tree_widget()
        self.setWindowTitle(constants.APPLICATION_TITLE)
        self.export_xlsx.setEnabled(False)
        # Init the default date of the period date edit
        today = date.today()
        max_date = today - relativedelta(months=1)
        self.period_dateedit.setMaximumDate(max_date)
        self.period_dateedit.setDate(max_date)
        # Create the reports widget and add them to the scrollview
        self.cursor = None
        self.fuchia_database = None
        # Init site name
        self.report_widget = ReportWidget()
        self.reportArea.layout().addWidget(self.report_widget)
        self.report_widget.hide()
        # Init progress dialog
        self.progress = QProgressDialog(str(), str(), 0, 100, self)
        self.progress.setCancelButton(None)
        self.progress.setWindowModality(Qt.WindowModal)
        self.progress.setWindowTitle("Génération du rapport en cours")
        # Init template processor
        self.template_processor = XlsTemplateProcessor(
            constants.DEFAULT_REPORT_TEMPLATE,
            self.fuchia_database
        )
        self.report_widget.template_processor = self.template_processor
        # Connect the signals
        self.connect_signals()
        self.modify_advanced_clicked()
        self.update_data(self.fuchiadb_path_lineedit.text())

    def update_data(self, db_path):
        if db_path in (None, ''):
            self.cursor = None
            self.fuchia_database = None
            self.template_processor.fuchia_database = self.fuchia_database
            self.action_generate.setEnabled(False)
        else:
            if os.path.exists(db_path):
                self.cursor = utils.getCursor(db_path, constants.FUCHIADB_PASSWORD)
                self.fuchia_database = FuchiaDatabase(self.cursor)
                self.template_processor.fuchia_database = self.fuchia_database
                self.action_generate.setEnabled(True)
            else:
                self.cursor = None
                self.fuchia_database = None
                self.template_processor.fuchia_database = self.fuchia_database
                self.action_generate.setEnabled(False)
                utils.getWarningMessageBox(
                    "Le fichier n'existe pas",
                    "La base de données selectionnée n'existe pas."
                ).exec_()
        self.clear_prescriptions()
        self.clear_patient_details_tree_widget()

    def init_main_toolbar(self):
        # Settings
        self.settings_action = self.parameters_dockwidget.toggleViewAction()
        self.settings_action.setIcon(QIcon(constants.SETTINGS_ICON))
        self.toolbar.addAction(self.settings_action)
        # Details
        self.details_action = \
            self.patients_details_dockwidget.toggleViewAction()
        self.details_action.setIcon(QIcon(constants.DETAILS_ICON))
        self.toolbar.addAction(self.details_action)
        # Prescriptions
        self.prescr_action = self.prescriptions_dockwidget.toggleViewAction()
        self.prescr_action.setIcon(QIcon(constants.PRESCRIPTIONS_ICON))
        self.toolbar.addAction(self.prescr_action)

    def init_secondary_toolbar(self):
        self.toolbar2 = NoContextMenuToolbar()
        # Date edit
        w = QWidget()
        l = QHBoxLayout()
        l.setContentsMargins(0, 0, 10, 0)
        l.setSpacing(10)
        l.addWidget(QLabel(texts.PERIOD_LABEL))
        self.period_dateedit = QDateEdit()
        self.period_dateedit.setDisplayFormat('MM/yyyy')
        l.layout().addWidget(self.period_dateedit)
        w.setLayout(l)
        self.toolbar2.addWidget(w)
        # Generate
        gen_txt = texts.GENERATE_TXT
        self.action_generate = self.toolbar2.addAction(gen_txt)
        self.action_generate.setIcon(QIcon(constants.GENERATE_ICON))
        # Exports
        ww = QWidget()
        ww.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.toolbar2.addSeparator()
        self.toolbar2.addWidget(ww)
        self.export_xlsx = self.toolbar2.addAction(texts.EXPORT_XLSX_TXT)
        self.export_xlsx.setIcon(QIcon(constants.EXPORT_XLSX_ICON))
        self.toolbar2.addSeparator()
        self.central_widget.addToolBar(self.toolbar2)

    def init_menu_bar(self):
        # Menu file
        self.filemenu = self.menubar.addMenu(texts.MENU_FILE)
        self.filemenu.addAction(texts.SELECT_DB, self.browse_button_clicked)
        self.filemenu.addAction(texts.CHANGE_SITENAME,
                                self.change_site_name_clicked)
        self.filemenu.addAction(texts.CHANGE_REGIONNAME,
                                self.change_region_name_clicked)
        self.filemenu.addAction("Quitter", self.close)
        # Menu window
        self.windowmenu = self.menubar.addMenu(texts.MENU_WINDOW)
        self.windowmenu.addAction(self.settings_action)
        self.windowmenu.addAction(self.details_action)
        self.windowmenu.addAction(self.prescr_action)
        # Menu about
        self.menuhelp = self.menubar.addMenu(texts.MENU_HELP)
        self.about_action = self.menuhelp.addAction(texts.ACTION_ABOUT,
                                                    self.show_about_dialog)

    def set_status_tips(self):
        self.export_xlsx.setStatusTip(self.export_xlsx.iconText())
        self.action_generate.setStatusTip(self.action_generate.iconText())
        self.settings_action.setStatusTip(self.settings_action.iconText())
        self.details_action.setStatusTip(self.details_action.iconText())
        self.prescr_action.setStatusTip(self.prescr_action.iconText())

    def init_patient_details_tree_widget(self):
        self.treeWidget.setColumnCount(2)
        self.patients_details_root_items = {}
        self.headers_buttons = {}

    def clear_patient_details_tree_widget(self):
        self.treeWidget.clear()
        self.patients_details_root_items = {}
        self.headers_buttons = {}

    def update_patient_details_tree_widget(self):
        self.progress.setLabelText("Détail des codes patients...")
        QApplication.processEvents()
        indicators = self.template_processor.last_values
        for key, value in indicators.items():
            item = QTreeWidgetItem(self.treeWidget)
            item.setFirstColumnSpanned(True)
            label = INDICATORS_REGISTRY[key]['class'].get_display_label()
            button = CatPushButton(label, item)
            self.patients_details_root_items[key] = item
            self.headers_buttons[key] = button
            self.treeWidget.setItemWidget(item, 0, button)
            for cat, codes in value.items():
                if len(codes) == 0:
                    continue
                self.headers_buttons[key].setEnabled(True)
                cat_item = QTreeWidgetItem(item)
                cat_item.setFirstColumnSpanned(True)
                f = cat_item.font(0)
                f.setBold(True)
                cat_item.setFont(0, f)
                cat_item.setText(0, cat)
                for code in codes:
                    code_item = QTreeWidgetItem(cat_item)
                    code_item.setFirstColumnSpanned(True)
                    ff = code_item.font(0)
                    ff.setBold(False)
                    code_item.setFont(0, ff)
                    code_item.setText(0, code)
        self.progress.setValue(self.progress.value() + 1)

    def init_prescriptions_tree_widget(self):
        # Treewidget
        self.arv_presc_treeWidget.setColumnCount(2)
        self.arv_presc_treeWidget.setHeaderLabels([texts.TREATMENT,
                                                   texts.PATIENTS_NB])
        # Active file repartition
        self.fa_repartition = QTreeWidgetItem(self.arv_presc_treeWidget)
        self.fa_repartition.setFirstColumnSpanned(True)
        t1 = texts.FA_REPARTITION
        self.fa_rep_button = CatPushButton(t1, self.fa_repartition)
        self.arv_presc_treeWidget.setItemWidget(self.fa_repartition, 0,
                                                self.fa_rep_button)
        # Prescriptions repartition
        self.presc_repartition = QTreeWidgetItem(self.arv_presc_treeWidget)
        self.presc_repartition.setFirstColumnSpanned(True)
        t2 = texts.PRESC_REPARTITION
        self.presc_rep_button = CatPushButton(t2, self.presc_repartition)
        self.arv_presc_treeWidget.setItemWidget(self.presc_repartition, 0,
                                                self.presc_rep_button)

    def clear_prescriptions(self):
        self.fa_repartition.takeChildren()
        self.presc_repartition.takeChildren()

    def update_prescriptions(self):
        self.progress.setLabelText(
            "Répartition des traitements..."
        )
        QApplication.processEvents()
        # Active file repartition
        arv_repartition = ArvRepartition(self.fuchia_database)
        month = self.period_dateedit.date().month()
        year = self.period_dateedit.date().year()
        start_date = utils.getFirstDayOfPeriod(month, year)
        end_date = utils.getLastDayOfPeriod(month, year)
        active_list_repartition = arv_repartition.get_active_list_repartition(
            end_date,
            start_date=start_date,
            include_null_dates=None
        )
        prescription_repartition = arv_repartition.get_prescriptions_repartition(
            end_date,
            start_date=start_date,
            include_null_dates=None
        )
        # Repartition
        for key, value in active_list_repartition.iteritems():
            line_item = QTreeWidgetItem(self.fa_repartition)
            t = ' + '.join([
                self.fuchia_database.references_dataframe.loc[i]['lookup']
                for i in key
            ])
            f = line_item.font(0)
            f.setBold(True)
            line_item.setFont(0, f)
            line_item.setText(0, t)
            ff = line_item.font(1)
            ff.setBold(False)
            line_item.setFont(1, ff)
            line_item.setText(1, str(int(value)))
        if len(active_list_repartition) == 0:
            self.fa_rep_button.setEnabled(False)
        else:
            self.fa_rep_button.setEnabled(True)
        # Total
        total_fa = QTreeWidgetItem(self.fa_repartition)
        t = texts.TOTAL
        f = total_fa.font(0)
        f.setBold(True)
        brush = QBrush(Qt.darkGray)
        total_fa.setForeground(0, brush)
        total_fa.setForeground(1, brush)
        total_fa.setFont(0, f)
        total_fa.setText(0, t)
        tot = int(sum([i for i in active_list_repartition]))
        total_fa.setText(1, str(tot))
        # Prescriptions repartion
        for key, value in prescription_repartition.iteritems():
            line_item = QTreeWidgetItem(self.presc_repartition)
            t = ' + '.join([
                self.fuchia_database.references_dataframe.loc[i]['lookup']
                for i in key
            ])
            f = line_item.font(0)
            f.setBold(True)
            line_item.setFont(0, f)
            line_item.setText(0, t)
            ff = line_item.font(1)
            ff.setBold(False)
            line_item.setFont(1, ff)
            line_item.setText(1, str(value))
        # Total
        total_presc = QTreeWidgetItem(self.presc_repartition)
        t = texts.TOTAL
        f = total_presc.font(0)
        f.setBold(True)
        total_presc.setForeground(0, brush)
        total_presc.setForeground(1, brush)
        total_presc.setFont(0, f)
        total_presc.setText(0, t)
        tot = sum([i for i in prescription_repartition])
        total_presc.setText(1, str(tot))
        if len(prescription_repartition) == 0:
            self.presc_rep_button.setEnabled(False)
        else:
            self.presc_rep_button.setEnabled(True)
        self.progress.setValue(self.progress.value() + 1)

    def connect_signals(self):
        """
        Connect the signals to their corresponding slots.
        """
        self.action_generate.triggered.connect(self.generate_button_clicked)
        self.browse_button.clicked.connect(self.browse_button_clicked)
        self.browse_template_button.clicked.connect(self.browse_template_button_clicked)
        self.export_xlsx.triggered.connect(self.export_report_to_excel)
        self.change_name_button.clicked.connect(self.change_site_name_clicked)
        self.change_region_button.clicked.connect(self.change_region_name_clicked)
        self.advanced_parameters_button.clicked.connect(
            self.advanced_parameters_button_clicked
        )
        self.pdv_delay_spin.valueChanged.connect(self.pdv_delay_spin_changed)
        self.default_visit_offset_spin.valueChanged.connect(
            self.default_visit_offset_spin_changed
        )
        self.modify_non_arv_button.clicked.connect(
            self.modify_non_arv_drugs_clicked
        )
        self.modify_ctx_button.clicked.connect(self.modify_ctx_clicked)
        self.modify_entry_tb_button.clicked.connect(self.modify_tb_entry_clicked)
        self.modify_diag_tb_button.clicked.connect(self.modify_tb_diag_clicked)
        self.modify_advanced_pushbutton.toggled.connect(
            self.modify_advanced_clicked
        )
        self.report_widget.template_processor.update_progress.connect(
            self.update_progress
        )
        self.report_widget.report_processed.connect(
            self.update_patient_details_tree_widget
        )
        self.report_widget.report_processed.connect(self.update_prescriptions)
        self.report_widget.report_processed.connect(self.enable_export)
        self.report_widget.processing_error.connect(self.processing_error)

    def processing_error(self):
        self.progress.setMaximum(0)
        self.progress.hide()
        self.export_xlsx.setEnabled(False)
        self.report_widget.hide()

    def enable_export(self):
        self.export_xlsx.setEnabled(True)

    def update_progress(self, progress):
        self.progress.setValue(progress)

    def update_site_label(self):
        name = self.site_nameedit.text()
        d = self.period_dateedit.date()
        sitetext = '{} - {}/{}'.format(name,
                                       d.month(),
                                       d.year())
        self.site_label.setText(sitetext)

    def generate_button_clicked(self):
        try:
            self.clear_patient_details_tree_widget()
            self.clear_prescriptions()
            self.export_xlsx.setEnabled(False)
            # Compute report
            self.progress.setValue(0)
            self.progress.setLabelText("Calcul des indicateurs...")
            self.progress.setMaximum(self.report_widget.cell_count() + 2)
            self.progress.setMinimumDuration(0)
            self.progress.forceShow()
            month = self.period_dateedit.date().month()
            year = self.period_dateedit.date().year()
            start_date = utils.getFirstDayOfPeriod(month, year)
            end_date = utils.getLastDayOfPeriod(month, year)
            self.report_widget.compute_values(
                start_date,
                end_date
            )
            self.update_site_label()
            self.report_widget.show()
        except:
            t = "Une erreur est survenue pendant le calcul du rapport"
            m = """
                Assurez vous d'avoir bien configuré l'outil et le template du
                rapport à générer. Si l'erreur persiste, contactez Solthis.
                """
            msg_box = utils.getCriticalMessageBox(t, m)
            msg_box.exec_()

    def init_parameters_widget(self):
        """
        Initialize the parameters widget with the stored values.
        """
        self.fuchiadb_path_lineedit.setText(constants.DEFAULT_DATABASE)
        self.site_nameedit.setText(constants.DEFAULT_SITENAME)
        self.region_nameedit.setText(constants.DEFAULT_REGION_NAME)
        self.pdv_delay_spin.setValue(constants.PDV_MONTHS_DELAY)
        offset_default = constants.DEFAULT_NEXT_VISIT_OFFSET
        self.default_visit_offset_spin.setValue(offset_default)
        non_arv_t = ','.join([str(i) for i in constants.EXCLUDED_DRUGS])
        self.non_arv_lineedit.setText(non_arv_t)
        ctx_t = ','.join([str(i) for i in constants.CTX])
        self.ctx_lineedit.setText(ctx_t)
        entry_tb_t = ','.join([str(i) for i in constants.TB_ENTRY])
        self.entry_tb_lineedit.setText(entry_tb_t)
        diag_tb = ','.join([str(i) for i in constants.TB_DIAGNOSIS])
        self.diag_tb_lineedit.setText(diag_tb)
        if constants.ALLOW_PDV_DELAY_MODIF:
            self.pdv_delay_spin.setEnabled(True)
        else:
            self.pdv_delay_spin.setEnabled(False)

    def advanced_parameters_button_clicked(self):
        """
        Hide/Show the advanced parameters section when the button is clicked.
        """
        if self.advanced_frame.isVisible():
            self.advanced_frame.hide()
            t = texts.SHOW_ADVANCED
            self.advanced_parameters_button.setText(t)
        else:
            self.advanced_frame.show()
            t = texts.HIDE_ADVANCED
            self.advanced_parameters_button.setText(t)
        self.parameters_dockwidget.setMinimumHeight(0)
        self.parameters_dockwidget.setMinimumWidth(0)
        self.parameters_dockcontents.adjustSize()

    def pdv_delay_spin_changed(self):
        constants.setPdvMonthDelay(self.pdv_delay_spin.value())

    def default_visit_offset_spin_changed(self):
        v = self.default_visit_offset_spin.value()
        constants.setDefaultVisitOffset(v)

    def modify_non_arv_drugs_clicked(self):
        dialog = ModifyStrListDialog([str(i)
                                      for i in constants.EXCLUDED_DRUGS])
        wt = texts.MODIFY_NON_ARV
        dialog.setWindowTitle(wt)
        b = dialog.exec_()
        if b:
            str_list = dialog.model.stringList()
            constants.setNonArvDrugs(str_list)
            self.non_arv_lineedit.setText(','.join(str_list))

    def modify_ctx_clicked(self):
        dialog = ModifyStrListDialog([str(i) for i in constants.CTX])
        wt = texts.MODIFY_CTX
        dialog.setWindowTitle(wt)
        b = dialog.exec_()
        if b:
            str_list = dialog.model.stringList()
            constants.setCtxDrugs(str_list)
            self.ctx_lineedit.setText(','.join(str_list))

    def modify_tb_entry_clicked(self):
        dialog = ModifyStrListDialog([str(i) for i in constants.TB_ENTRY])
        dialog.setWindowTitle(texts.MODIFY_TB_ENTRY)
        b = dialog.exec_()
        if b:
            str_list = dialog.model.stringList()
            constants.setTbEntries(str_list)
            self.entry_tb_lineedit.setText(','.join(str_list))

    def modify_tb_diag_clicked(self):
        dialog = ModifyStrListDialog([str(i)
                                      for i in constants.TB_DIAGNOSIS])
        dialog.setWindowTitle(texts.MODIFY_TB_DIAG)
        b = dialog.exec_()
        if b:
            str_list = dialog.model.stringList()
            constants.setTbDiagnosis(str_list)
            self.diag_tb_lineedit.setText(','.join(str_list))

    def browse_button_clicked(self):
        """
        Slot called when the browse button is clicked.
        """
        t = texts.SELECT_DB
        db_filter = constants.DB_FILTER_WINDOWS
        if platform.system() == "Linux":
            db_filter = constants.DB_FILTER_LINUX
        filename = QFileDialog.getOpenFileName(None, t, filter=db_filter)
        if filename[0] != '':
            self.fuchiadb_path_lineedit.setText(filename[0])
            constants.setDefaultDatabase(filename[0])
            fname = split('/', filename[0])[-1]
            name = split(constants.ACCESS_EXT, fname)[0]
            if platform.system() == 'Linux':
                name = split(constants.SQLITE_EXT, fname)[0]
            constants.setDefaultSiteName(name)
            self.site_nameedit.setText(name)
            self.site_label.setText('')
            self.report_widget.hide()
            self.update_data(filename[0])

    def browse_template_button_clicked(self):
        """
        Slot called when the browse template button is clicked.
        """
        t = "Sélectionnez le template à utiliser"
        filename = QFileDialog.getOpenFileName(None, t, filter=constants.XLSX_FILTER)
        if filename[0] != '':
            self.template_path_lineedit.setText(filename[0])
            constants.set_report_template(filename[0])
            r = constants.REPORT_TEMPLATE
            self.report_widget.template_processor.xls_template_path = r
            self.report_widget.update_grid()
        else:
            r = constants.DEFAULT_REPORT_TEMPLATE
            self.report_widget.template_processor.xls_template_path = r
            self.report_widget.update_grid()

    def change_site_name_clicked(self):
        """
        Slot called when the change sitename button is clicked.
        """
        text = QInputDialog.getText(self, texts.CHANGE_SITENAME,
                                    texts.SITENAME_LABEL,
                                    QLineEdit.Normal,
                                    self.site_nameedit.text())
        if text[1]:
            self.site_nameedit.setText(text[0])
            constants.setDefaultSiteName(text[0])
            self.update_site_label()

    def change_region_name_clicked(self):
        """
        Slot called when the change regionname button is clicked.
        """
        text = QInputDialog.getText(self, texts.CHANGE_REGIONNAME,
                                    texts.REGIONNAME_LABEL,
                                    QLineEdit.Normal,
                                    self.region_nameedit.text())
        if text[1]:
            self.region_nameedit.setText(text[0])
            constants.setDefaultRegionName(text[0])

    def export_report_to_excel(self):
        t = texts.EXPORT_XLSX_TXT
        filename = \
            QFileDialog.getSaveFileName(
                None,
                t,
                filter=constants.XLSX_FILTER
            )
        if filename[0] != '':
            try:
                self.template_processor.export_to_excel(filename[0])
            except:
                t = texts.EXPORT_ERROR_TITLE
                m = texts.EXPORT_ERROR_MSG
                msg_box = utils.getCriticalMessageBox(t, m)
                msg_box.exec_()

    def show_about_dialog(self):
        about = AboutDialog()
        about.exec_()

    def modify_advanced_clicked(self):
        """
        Slot called when modify advanced parameters button is clicked,
        enable/disable the advanced parameters modification.
        """
        if self.modify_advanced_pushbutton.isChecked():
            b = PassWordDialog(self).exec_()
            if b:
                self.pdv_group.setEnabled(True)
                self.treatment_group.setEnabled(True)
                self.tb_group.setEnabled(True)
                self.template_groupbox.setEnabled(True)
            else:
                self.pdv_group.setEnabled(False)
                self.treatment_group.setEnabled(False)
                self.tb_group.setEnabled(False)
                self.modify_advanced_pushbutton.setChecked(False)
                self.template_groupbox.setEnabled(False)
        else:
            self.pdv_group.setEnabled(False)
            self.treatment_group.setEnabled(False)
            self.tb_group.setEnabled(False)
            self.template_groupbox.setEnabled(False)


class CatPushButton(QPushButton):
    """
    Button for the treewidgets main categories.
    """

    def __init__(self, text, item, parent=None):
        super(CatPushButton, self).__init__(text, parent)
        self.item = item
        self.clicked.connect(self.action)
        self.setEnabled(False)

    def action(self):
        self.item.setExpanded(not self.item.isExpanded())


class ModifyStrListDialog(QDialog, Ui_StringListDialog):
    """
    Dialog for modifying a list of string, used in the parameter widget.
    """

    def __init__(self, str_list, parent=None):
        super(ModifyStrListDialog, self).__init__(parent)
        self.setupUi(self)
        self.str_list = str_list
        self.model = QStringListModel(str_list)
        self.listView.setModel(self.model)
        s_model = self.listView.selectionModel()
        s_model.currentChanged.connect(self.currentChanged)
        self.delete_button.clicked.connect(self.deleteClicked)
        self.spinBox.valueChanged.connect(self.spinChanged)
        self.add_button.clicked.connect(self.addClicked)
        self.delete_button.setEnabled(False)
        self.listView.setCurrentIndex(QModelIndex())
        self.spinChanged()

    def currentChanged(self):
        index = self.listView.selectionModel().currentIndex()
        if index.isValid():
            self.delete_button.setEnabled(True)
        else:
            self.delete_button.setEnabled(False)

    def deleteClicked(self):
        index = self.listView.selectionModel().currentIndex()
        self.model.removeRows(index.row(), 1)
        self.str_list = self.model.stringList()

    def addClicked(self):
        v = self.spinBox.value()
        self.model.insertRows(self.model.rowCount(), 1)
        i = self.model.index(self.model.rowCount() - 1, 0)
        self.model.setData(i, str(v))
        self.str_list = self.model.stringList()
        self.spinChanged()

    def spinChanged(self):
        v = self.spinBox.value()
        if str(v) in self.str_list:
            self.add_button.setEnabled(False)
        else:
            self.add_button.setEnabled(True)


class AboutDialog(QDialog, Ui_AboutDialog):
    """
    Dialog showing general informations about the software.
    """

    def __init__(self, parent=None):
        super(AboutDialog, self).__init__(parent)
        self.setupUi(self)
        self.setWindowTitle(texts.ACTION_ABOUT)
        self.fugendesc_label.setText(texts.TEXT_ABOUT)
        self.credit_label.setText(texts.CREDIT_ABOUT)
        self.fugenlogo_label.setPixmap(QPixmap(QImage(constants.FUGEN_LOGO)))
        solthis_pix = QPixmap(QImage(constants.SOLTHIS_LOGO))
        self.solthis_logo_label.setPixmap(solthis_pix)
        # pnpcsp_pix = QPixmap(QImage(constants.PNPCSP_LOGO))
        # self.pnpcsp_logo_label.setPixmap(pnpcsp_pix)
        # cnls_pix = QPixmap(QImage(constants.CNLS_LOGO))
        # self.cnls_logo_label.setPixmap(cnls_pix)


class NoContextMenuToolbar(QToolBar):
    def contextMenuEvent(self, *args, **kwargs):
        pass


class PassWordDialog(QDialog, Ui_PassWordDialog):

    def __init__(self, parent=None):
        super(PassWordDialog, self).__init__(parent)
        self.setupUi(self)
        self.setWindowTitle("Veuillez saisir le mot de passe administrateur")

    def accept(self, *args, **kwargs):
        if self.password_line_edit.text() != constants.ADMIN_PASSWORD:
            self.error_label.setText("Le mot de passe est incorrect")
        else:
            self.error_label.setText("")
            return super(PassWordDialog, self).accept(*args, **kwargs)
